const mqtt = require('mqtt');

// MQTT ì„¤ì •
const mqttBroker = 'mqtt://localhost:1886'; // Mosquitto ë¸Œë¡œì»¤ ì£¼ì†Œ
const client = mqtt.connect(mqttBroker);

const topicMessage = 'topic/message';
const topicNumber = 'topic/number';
const topicTime = 'topic/time';
const response = 'response';

client.on('connect', () => {
    console.log(`Connected to MQTT broker`);
    client.subscribe(topicMessage);
    client.subscribe(topicNumber);
    if (client.connected === true) {
        // var message = "Connected to MQTT broker"
        // client.publish(topicMessage, message);
        // console.log(`Publish message on topic ${topicMessage} : ${message}`);
        setInterval(() => {
            const currentTime = new Date().toLocaleString();
            const message = currentTime;

            // ë©”ì‹œì§€ publish
            client.publish(topicTime, `[ðŸ–¥Node] Publish message on topic ${topicTime} : ${message}`, (err) => {
                if (err) {
                    console.error('ë©”ì‹œì§€ ì „ì†¡ ì‹¤íŒ¨:', err);
                } else {
                    console.log(`[ðŸ–¥node] Publish message on topic ${topicTime} : ${message}`);
                }
            });
        }, 3000); // 3ì´ˆ ê°„ê²©
    }
});


// receive a message from the subscribed topic
client.on('message', (topic, message) => {
    console.log(`Received on topic ${topic}: ${message.toString()}`);
    if (client.connected === true) {
        client.publish(response, `[ðŸ–¥Node] Received on topic ${topic}: ${message.toString()}`);
        console.log(`Publish message on topic ${topic} : ${message}`);
    }
});


// error handling
client.on('error',(error) => {
    console.error(error);
    process.exit(1);
});

